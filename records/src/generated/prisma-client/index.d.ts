// Code generated by Prisma (prisma@1.29.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  price: (where?: PriceWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  price: (where: PriceWhereUniqueInput) => PricePromise;
  prices: (
    args?: {
      where?: PriceWhereInput;
      orderBy?: PriceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Price>;
  pricesConnection: (
    args?: {
      where?: PriceWhereInput;
      orderBy?: PriceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PriceConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPrice: (data: PriceCreateInput) => PricePromise;
  updatePrice: (
    args: { data: PriceUpdateInput; where: PriceWhereUniqueInput }
  ) => PricePromise;
  updateManyPrices: (
    args: { data: PriceUpdateManyMutationInput; where?: PriceWhereInput }
  ) => BatchPayloadPromise;
  upsertPrice: (
    args: {
      where: PriceWhereUniqueInput;
      create: PriceCreateInput;
      update: PriceUpdateInput;
    }
  ) => PricePromise;
  deletePrice: (where: PriceWhereUniqueInput) => PricePromise;
  deleteManyPrices: (where?: PriceWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  price: (
    where?: PriceSubscriptionWhereInput
  ) => PriceSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PriceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "country_ASC"
  | "country_DESC"
  | "currency_ASC"
  | "currency_DESC"
  | "locale_ASC"
  | "locale_DESC"
  | "originPlace_ASC"
  | "originPlace_DESC"
  | "destinationPlace_ASC"
  | "destinationPlace_DESC"
  | "outboundpartialdate_ASC"
  | "outboundpartialdate_DESC"
  | "inboundpartialdate_ASC"
  | "inboundpartialdate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface PriceCreateInput {
  country: String;
  currency: String;
  locale: String;
  originPlace: String;
  destinationPlace: String;
  outboundpartialdate: String;
  inboundpartialdate: String;
}

export interface PriceUpdateInput {
  country?: String;
  currency?: String;
  locale?: String;
  originPlace?: String;
  destinationPlace?: String;
  outboundpartialdate?: String;
  inboundpartialdate?: String;
}

export interface PriceUpdateManyMutationInput {
  country?: String;
  currency?: String;
  locale?: String;
  originPlace?: String;
  destinationPlace?: String;
  outboundpartialdate?: String;
  inboundpartialdate?: String;
}

export interface PriceWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  currency?: String;
  currency_not?: String;
  currency_in?: String[] | String;
  currency_not_in?: String[] | String;
  currency_lt?: String;
  currency_lte?: String;
  currency_gt?: String;
  currency_gte?: String;
  currency_contains?: String;
  currency_not_contains?: String;
  currency_starts_with?: String;
  currency_not_starts_with?: String;
  currency_ends_with?: String;
  currency_not_ends_with?: String;
  locale?: String;
  locale_not?: String;
  locale_in?: String[] | String;
  locale_not_in?: String[] | String;
  locale_lt?: String;
  locale_lte?: String;
  locale_gt?: String;
  locale_gte?: String;
  locale_contains?: String;
  locale_not_contains?: String;
  locale_starts_with?: String;
  locale_not_starts_with?: String;
  locale_ends_with?: String;
  locale_not_ends_with?: String;
  originPlace?: String;
  originPlace_not?: String;
  originPlace_in?: String[] | String;
  originPlace_not_in?: String[] | String;
  originPlace_lt?: String;
  originPlace_lte?: String;
  originPlace_gt?: String;
  originPlace_gte?: String;
  originPlace_contains?: String;
  originPlace_not_contains?: String;
  originPlace_starts_with?: String;
  originPlace_not_starts_with?: String;
  originPlace_ends_with?: String;
  originPlace_not_ends_with?: String;
  destinationPlace?: String;
  destinationPlace_not?: String;
  destinationPlace_in?: String[] | String;
  destinationPlace_not_in?: String[] | String;
  destinationPlace_lt?: String;
  destinationPlace_lte?: String;
  destinationPlace_gt?: String;
  destinationPlace_gte?: String;
  destinationPlace_contains?: String;
  destinationPlace_not_contains?: String;
  destinationPlace_starts_with?: String;
  destinationPlace_not_starts_with?: String;
  destinationPlace_ends_with?: String;
  destinationPlace_not_ends_with?: String;
  outboundpartialdate?: String;
  outboundpartialdate_not?: String;
  outboundpartialdate_in?: String[] | String;
  outboundpartialdate_not_in?: String[] | String;
  outboundpartialdate_lt?: String;
  outboundpartialdate_lte?: String;
  outboundpartialdate_gt?: String;
  outboundpartialdate_gte?: String;
  outboundpartialdate_contains?: String;
  outboundpartialdate_not_contains?: String;
  outboundpartialdate_starts_with?: String;
  outboundpartialdate_not_starts_with?: String;
  outboundpartialdate_ends_with?: String;
  outboundpartialdate_not_ends_with?: String;
  inboundpartialdate?: String;
  inboundpartialdate_not?: String;
  inboundpartialdate_in?: String[] | String;
  inboundpartialdate_not_in?: String[] | String;
  inboundpartialdate_lt?: String;
  inboundpartialdate_lte?: String;
  inboundpartialdate_gt?: String;
  inboundpartialdate_gte?: String;
  inboundpartialdate_contains?: String;
  inboundpartialdate_not_contains?: String;
  inboundpartialdate_starts_with?: String;
  inboundpartialdate_not_starts_with?: String;
  inboundpartialdate_ends_with?: String;
  inboundpartialdate_not_ends_with?: String;
  AND?: PriceWhereInput[] | PriceWhereInput;
  OR?: PriceWhereInput[] | PriceWhereInput;
  NOT?: PriceWhereInput[] | PriceWhereInput;
}

export interface PriceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PriceWhereInput;
  AND?: PriceSubscriptionWhereInput[] | PriceSubscriptionWhereInput;
  OR?: PriceSubscriptionWhereInput[] | PriceSubscriptionWhereInput;
  NOT?: PriceSubscriptionWhereInput[] | PriceSubscriptionWhereInput;
}

export type PriceWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface AggregatePrice {
  count: Int;
}

export interface AggregatePricePromise
  extends Promise<AggregatePrice>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePriceSubscription
  extends Promise<AsyncIterator<AggregatePrice>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PricePreviousValues {
  id: ID_Output;
  country: String;
  currency: String;
  locale: String;
  originPlace: String;
  destinationPlace: String;
  outboundpartialdate: String;
  inboundpartialdate: String;
}

export interface PricePreviousValuesPromise
  extends Promise<PricePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  country: () => Promise<String>;
  currency: () => Promise<String>;
  locale: () => Promise<String>;
  originPlace: () => Promise<String>;
  destinationPlace: () => Promise<String>;
  outboundpartialdate: () => Promise<String>;
  inboundpartialdate: () => Promise<String>;
}

export interface PricePreviousValuesSubscription
  extends Promise<AsyncIterator<PricePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  country: () => Promise<AsyncIterator<String>>;
  currency: () => Promise<AsyncIterator<String>>;
  locale: () => Promise<AsyncIterator<String>>;
  originPlace: () => Promise<AsyncIterator<String>>;
  destinationPlace: () => Promise<AsyncIterator<String>>;
  outboundpartialdate: () => Promise<AsyncIterator<String>>;
  inboundpartialdate: () => Promise<AsyncIterator<String>>;
}

export interface PriceEdge {
  node: Price;
  cursor: String;
}

export interface PriceEdgePromise extends Promise<PriceEdge>, Fragmentable {
  node: <T = PricePromise>() => T;
  cursor: () => Promise<String>;
}

export interface PriceEdgeSubscription
  extends Promise<AsyncIterator<PriceEdge>>,
    Fragmentable {
  node: <T = PriceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PriceSubscriptionPayload {
  mutation: MutationType;
  node: Price;
  updatedFields: String[];
  previousValues: PricePreviousValues;
}

export interface PriceSubscriptionPayloadPromise
  extends Promise<PriceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PricePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PricePreviousValuesPromise>() => T;
}

export interface PriceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PriceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PriceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PricePreviousValuesSubscription>() => T;
}

export interface Price {
  id: ID_Output;
  country: String;
  currency: String;
  locale: String;
  originPlace: String;
  destinationPlace: String;
  outboundpartialdate: String;
  inboundpartialdate: String;
}

export interface PricePromise extends Promise<Price>, Fragmentable {
  id: () => Promise<ID_Output>;
  country: () => Promise<String>;
  currency: () => Promise<String>;
  locale: () => Promise<String>;
  originPlace: () => Promise<String>;
  destinationPlace: () => Promise<String>;
  outboundpartialdate: () => Promise<String>;
  inboundpartialdate: () => Promise<String>;
}

export interface PriceSubscription
  extends Promise<AsyncIterator<Price>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  country: () => Promise<AsyncIterator<String>>;
  currency: () => Promise<AsyncIterator<String>>;
  locale: () => Promise<AsyncIterator<String>>;
  originPlace: () => Promise<AsyncIterator<String>>;
  destinationPlace: () => Promise<AsyncIterator<String>>;
  outboundpartialdate: () => Promise<AsyncIterator<String>>;
  inboundpartialdate: () => Promise<AsyncIterator<String>>;
}

export interface PriceConnection {
  pageInfo: PageInfo;
  edges: PriceEdge[];
}

export interface PriceConnectionPromise
  extends Promise<PriceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PriceEdge>>() => T;
  aggregate: <T = AggregatePricePromise>() => T;
}

export interface PriceConnectionSubscription
  extends Promise<AsyncIterator<PriceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PriceEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePriceSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Price",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
