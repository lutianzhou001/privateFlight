module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.29.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregatePrice {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createPrice(data: PriceCreateInput!): Price!
  updatePrice(data: PriceUpdateInput!, where: PriceWhereUniqueInput!): Price
  updateManyPrices(data: PriceUpdateManyMutationInput!, where: PriceWhereInput): BatchPayload!
  upsertPrice(where: PriceWhereUniqueInput!, create: PriceCreateInput!, update: PriceUpdateInput!): Price!
  deletePrice(where: PriceWhereUniqueInput!): Price
  deleteManyPrices(where: PriceWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Price {
  id: ID!
  country: String!
  currency: String!
  locale: String!
  originPlace: String!
  destinationPlace: String!
  outboundpartialdate: String!
  inboundpartialdate: String!
}

type PriceConnection {
  pageInfo: PageInfo!
  edges: [PriceEdge]!
  aggregate: AggregatePrice!
}

input PriceCreateInput {
  country: String!
  currency: String!
  locale: String!
  originPlace: String!
  destinationPlace: String!
  outboundpartialdate: String!
  inboundpartialdate: String!
}

type PriceEdge {
  node: Price!
  cursor: String!
}

enum PriceOrderByInput {
  id_ASC
  id_DESC
  country_ASC
  country_DESC
  currency_ASC
  currency_DESC
  locale_ASC
  locale_DESC
  originPlace_ASC
  originPlace_DESC
  destinationPlace_ASC
  destinationPlace_DESC
  outboundpartialdate_ASC
  outboundpartialdate_DESC
  inboundpartialdate_ASC
  inboundpartialdate_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PricePreviousValues {
  id: ID!
  country: String!
  currency: String!
  locale: String!
  originPlace: String!
  destinationPlace: String!
  outboundpartialdate: String!
  inboundpartialdate: String!
}

type PriceSubscriptionPayload {
  mutation: MutationType!
  node: Price
  updatedFields: [String!]
  previousValues: PricePreviousValues
}

input PriceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PriceWhereInput
  AND: [PriceSubscriptionWhereInput!]
  OR: [PriceSubscriptionWhereInput!]
  NOT: [PriceSubscriptionWhereInput!]
}

input PriceUpdateInput {
  country: String
  currency: String
  locale: String
  originPlace: String
  destinationPlace: String
  outboundpartialdate: String
  inboundpartialdate: String
}

input PriceUpdateManyMutationInput {
  country: String
  currency: String
  locale: String
  originPlace: String
  destinationPlace: String
  outboundpartialdate: String
  inboundpartialdate: String
}

input PriceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  currency: String
  currency_not: String
  currency_in: [String!]
  currency_not_in: [String!]
  currency_lt: String
  currency_lte: String
  currency_gt: String
  currency_gte: String
  currency_contains: String
  currency_not_contains: String
  currency_starts_with: String
  currency_not_starts_with: String
  currency_ends_with: String
  currency_not_ends_with: String
  locale: String
  locale_not: String
  locale_in: [String!]
  locale_not_in: [String!]
  locale_lt: String
  locale_lte: String
  locale_gt: String
  locale_gte: String
  locale_contains: String
  locale_not_contains: String
  locale_starts_with: String
  locale_not_starts_with: String
  locale_ends_with: String
  locale_not_ends_with: String
  originPlace: String
  originPlace_not: String
  originPlace_in: [String!]
  originPlace_not_in: [String!]
  originPlace_lt: String
  originPlace_lte: String
  originPlace_gt: String
  originPlace_gte: String
  originPlace_contains: String
  originPlace_not_contains: String
  originPlace_starts_with: String
  originPlace_not_starts_with: String
  originPlace_ends_with: String
  originPlace_not_ends_with: String
  destinationPlace: String
  destinationPlace_not: String
  destinationPlace_in: [String!]
  destinationPlace_not_in: [String!]
  destinationPlace_lt: String
  destinationPlace_lte: String
  destinationPlace_gt: String
  destinationPlace_gte: String
  destinationPlace_contains: String
  destinationPlace_not_contains: String
  destinationPlace_starts_with: String
  destinationPlace_not_starts_with: String
  destinationPlace_ends_with: String
  destinationPlace_not_ends_with: String
  outboundpartialdate: String
  outboundpartialdate_not: String
  outboundpartialdate_in: [String!]
  outboundpartialdate_not_in: [String!]
  outboundpartialdate_lt: String
  outboundpartialdate_lte: String
  outboundpartialdate_gt: String
  outboundpartialdate_gte: String
  outboundpartialdate_contains: String
  outboundpartialdate_not_contains: String
  outboundpartialdate_starts_with: String
  outboundpartialdate_not_starts_with: String
  outboundpartialdate_ends_with: String
  outboundpartialdate_not_ends_with: String
  inboundpartialdate: String
  inboundpartialdate_not: String
  inboundpartialdate_in: [String!]
  inboundpartialdate_not_in: [String!]
  inboundpartialdate_lt: String
  inboundpartialdate_lte: String
  inboundpartialdate_gt: String
  inboundpartialdate_gte: String
  inboundpartialdate_contains: String
  inboundpartialdate_not_contains: String
  inboundpartialdate_starts_with: String
  inboundpartialdate_not_starts_with: String
  inboundpartialdate_ends_with: String
  inboundpartialdate_not_ends_with: String
  AND: [PriceWhereInput!]
  OR: [PriceWhereInput!]
  NOT: [PriceWhereInput!]
}

input PriceWhereUniqueInput {
  id: ID
}

type Query {
  price(where: PriceWhereUniqueInput!): Price
  prices(where: PriceWhereInput, orderBy: PriceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Price]!
  pricesConnection(where: PriceWhereInput, orderBy: PriceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PriceConnection!
  node(id: ID!): Node
}

type Subscription {
  price(where: PriceSubscriptionWhereInput): PriceSubscriptionPayload
}
`
      }
    